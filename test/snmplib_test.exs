defmodule SnmplibTest do
  use ExUnit.Case
  doctest Snmplib

  test "unpack" do
    raw = <<0x30, 0x29, 0x2, 0x1, 0x0, 0x4, 0x6, 0x70, 0x75, 0x62, 0x6C, 0x69, 0x63, 0xA0,
            0x1C, 0x2, 0x4, 0x3A, 0xC7, 0xF8, 0xC3, 0x2, 0x1, 0x0, 0x2, 0x1, 0x0, 0x30,
            0xE, 0x30, 0xC, 0x6, 0x8, 0x2B, 0x6, 0x1, 0x2, 0x1, 0x1, 0x1, 0x0, 0x5, 0x0>>


    request = raw |> Snmplib.unpack |> IO.inspect

    assert is_map(request)
    assert [%SNMPv1.Variable{oid: ".1.3.6.1.2.1.1.1.0", value: nil}] == Map.get(request, :variable_bindings)

  end

  test "pack" do
    raw = <<0x30, 0x34, 0x2, 0x1, 0x0, 0x4, 0x6, 0x70, 0x75, 0x62, 0x6C, 0x69, 0x63, 0xA2,
            0x27, 0x2, 0x4, 0x3A, 0xC7, 0xF8, 0xC3, 0x2, 0x1, 0x0, 0x2, 0x1, 0x0, 0x30,
            0x19, 0x30, 0x17, 0x6, 0x8, 0x2B, 0x6, 0x1, 0x2, 0x1, 0x1, 0x1, 0x0, 0x4, 0xB,
            0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64>>

    response = %SNMPv1.Packet{
                  community: "public",
                  error_index: 0,
                  error_status: 0,
                  request_id: 3287861050,
                  type: "request",
                  variable_bindings: [%SNMPv1.Variable{oid: ".1.3.6.1.2.1.1.1.0", value: "Hello World"}],
                  version: 1
                }
    |> Snmplib.pack

    assert response == raw
  end

  test "OID" do
    for x <- 999..1000 do
      for y <- 15000..65535 do
        oid = ".1.3.6.1.2.1.#{x}.#{y}.0"
          # |> IO.inspect
          |> Common.str2oid
          |> Common.oid2str

          assert oid == ".1.3.6.1.2.1.#{x}.#{y}.0"
      end
    end
  end
end
